/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode sortedListToBST(ListNode head) {

        if(head==null){
            return null;
        }

        if(head.next == null){
            TreeNode node=new TreeNode(head.val);
            return node;
        }

        ArrayList<Integer> values = new ArrayList<Integer>();  
        int i=0;
        ListNode current = head;
        while (current != null) {
            values.add(current.val);
            current = current.next;
        }

        return helper(values,0,values.size()-1);   
        

    }

    public TreeNode helper(ArrayList<Integer> arr, int start, int end) {
        if (start > end) {
            return null;
        }

        int mid = (start + end) / 2;
        TreeNode temp = new TreeNode(arr.get(mid));

        temp.left = helper(arr, start, mid - 1);
        temp.right = helper(arr, mid + 1, end);

        return temp;
    }
}